name: Deploy

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag/version name (e.g., 2.18.1 for production, 2.18.1-rc1 for stg, dev-test-123 for dev)'
        required: true
        type: string
      run_clamav_scan:
        description: 'Run ClamAV security scan'
        required: true
        type: boolean
        default: true
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*' # Production: 2.18.1
      - '[0-9]*.[0-9]*.[0-9]*-rc*' # Staging: 2.18.1-rc1
      - 'dev-test-*' # Dev test: dev-test-123
      - 'dev-debug-*' # Dev debug: dev-debug-456

env:
  NODE_VERSION: '22.17.1'
  DOCKER_IMAGE_PREFIX: 'enebularagentdevelopers/enebular-agent'
  DOCKER_X64_VERSION: 'x64'
  DOCKER_ARM32V7_VERSION: 'arm32v7'
  DOCKER_ARM64V8_VERSION: 'arm64v8'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      environment: ${{ steps.detect.outputs.environment }}
      tag_name: ${{ steps.detect.outputs.tag_name }}
      run_clamav: ${{ steps.detect.outputs.run_clamav }}
      docker_images_valid: ${{ steps.check-docker.outputs.images_valid }}
    steps:
      - name: Detect environment from tag
        id: detect
        run: |
          echo "## Deploy Workflow Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # For tag pushes, detect environment from tag name
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            echo "- **Trigger**: Tag push" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: $TAG" >> $GITHUB_STEP_SUMMARY

            # Detect environment based on tag pattern
            if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ENV="production"
              RUN_CLAMAV="true"
            elif [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              ENV="stg"
              RUN_CLAMAV="true"
            elif [[ "$TAG" =~ ^dev-debug- ]]; then
              ENV="dev"
              RUN_CLAMAV="false"
            elif [[ "$TAG" =~ ^dev-test- ]]; then
              ENV="dev"
              RUN_CLAMAV="false"
            else
              echo "Error: Unknown tag format: $TAG"
              exit 1
            fi

            echo "environment=$ENV" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "run_clamav=$RUN_CLAMAV" >> $GITHUB_OUTPUT
          else
            # For manual dispatch, detect environment from tag_name input
            TAG="${{ github.event.inputs.tag_name }}"
            echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: $TAG" >> $GITHUB_STEP_SUMMARY

            # Detect environment based on tag pattern
            if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ENV="production"
              RUN_CLAMAV="true"
            elif [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              ENV="stg"
              RUN_CLAMAV="true"
            elif [[ "$TAG" =~ ^dev-debug- ]]; then
              ENV="dev"
              RUN_CLAMAV="false"
            elif [[ "$TAG" =~ ^dev-test- ]]; then
              ENV="dev"
              RUN_CLAMAV="false"
            else
              echo "Error: Unknown tag format: $TAG"
              exit 1
            fi

            # Override ClamAV setting with manual input (always takes precedence)
            RUN_CLAMAV="${{ github.event.inputs.run_clamav_scan }}"

            echo "environment=$ENV" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "run_clamav=$RUN_CLAMAV" >> $GITHUB_OUTPUT
          fi

      - name: Validate tag format
        id: validate
        run: |
          TAG="${{ steps.detect.outputs.tag_name }}"
          ENV="${{ steps.detect.outputs.environment }}"

          # Validation rules
          if [[ "$ENV" == "production" ]]; then
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Production tags must be in format X.Y.Z (e.g., 2.18.1)"
              exit 1
            fi
          elif [[ "$ENV" == "stg" ]]; then
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              echo "Error: Staging tags must be in format X.Y.Z-rcN (e.g., 2.18.1-rc1)"
              exit 1
            fi
          elif [[ "$ENV" == "dev" ]]; then
            if [[ ! "$TAG" =~ ^dev- ]]; then
              echo "Error: Dev tags must start with 'dev-' (e.g., dev-test-123)"
              exit 1
            fi
          fi

          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "✅ Tag format is valid for $ENV environment"

      - name: Deployment summary
        run: |
          echo "## 🚀 Deploy Workflow Started" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ steps.detect.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.detect.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ClamAV Scan**: ${{ steps.detect.outputs.run_clamav }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check all Docker images availability
        id: check-docker
        run: |
          echo "## Docker Images Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Define required images
          IMAGES=(
            "${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_X64_VERSION }}:node-${{ env.NODE_VERSION }}"
            "${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM32V7_VERSION }}:node-${{ env.NODE_VERSION }}"
            "${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM64V8_VERSION }}:node-${{ env.NODE_VERSION }}"
          )

          MISSING_IMAGES=()

          for IMAGE in "${IMAGES[@]}"; do
            echo "Checking Docker image: $IMAGE"

            if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
              echo "✅ $IMAGE" >> $GITHUB_STEP_SUMMARY
              echo "✅ Found: $IMAGE"
            else
              echo "❌ $IMAGE" >> $GITHUB_STEP_SUMMARY
              echo "❌ Missing: $IMAGE"
              MISSING_IMAGES+=("$IMAGE")
            fi
          done

          if [ ${#MISSING_IMAGES[@]} -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Missing Docker Images" >> $GITHUB_STEP_SUMMARY
            for MISSING in "${MISSING_IMAGES[@]}"; do
              echo "- $MISSING" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available tags on Docker Hub:" >> $GITHUB_STEP_SUMMARY

            # Show available tags for each missing image
            for MISSING in "${MISSING_IMAGES[@]}"; do
              REPO=$(echo "$MISSING" | cut -d':' -f1)
              echo "**$REPO:**" >> $GITHUB_STEP_SUMMARY
              curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/" | jq -r '.results[].name' | head -5 >> $GITHUB_STEP_SUMMARY || echo "Could not fetch tags" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done

            echo "images_valid=false" >> $GITHUB_OUTPUT
            echo "❌ Some Docker images are missing. Deploy jobs will be skipped."
            exit 1
          else
            echo "images_valid=true" >> $GITHUB_OUTPUT
            echo "✅ All Docker images are available"
          fi

  build-and-prepare:
    name: Build and Prepare
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.is_valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install and build
        run: |
          cd node-red && npm ci
          cd $GITHUB_WORKSPACE/agent && npm ci && npm run build
          cd $GITHUB_WORKSPACE/ports/awsiot && npm ci && npm run build
          cd $GITHUB_WORKSPACE/tools/updater/awsiot-thing-creator && npm ci && npm run build
          cd $GITHUB_WORKSPACE/tools/updater && npm ci && npm run build

      - name: Fix file permissions
        run: |
          # Fix permissions for executable files that may lose exec permissions in CI
          chmod +x $GITHUB_WORKSPACE/tools/updater/bin/enebular-agent-update || true
          chmod +x $GITHUB_WORKSPACE/tools/updater/script/update.sh || true
          chmod +x $GITHUB_WORKSPACE/agent/__tests__/data/*.sh || true
          chmod +x $GITHUB_WORKSPACE/agent/test/data/asset-script-* || true
          chmod +x $GITHUB_WORKSPACE/pack_enebular_agent*.sh || true
          chmod +x $GITHUB_WORKSPACE/ports/awsiot/bin/enebular-awsiot-agent || true

      - name: Run tests
        run: |
          cd ports/awsiot
          echo '{"host":"http://thing_shadow_rest_api_endpoint","port":8883,"clientId":"thing_name","thingName":"thing_name","caCert":"./certs/root_certificate","clientCert":"./certs/thing_cert","privateKey":"./certs/thing_private_key","topic":"aws/things/thing_name/shadow/update"}' > ./config.json
          npm run test
          rm ./config.json
          cd ../../tools/updater && npm run test
        env:
          ENEBULAR_TEST: 'true'

      - name: Clean up node_modules
        run: |
          rm -rf node-red/node_modules
          rm -rf agent/node_modules
          rm -rf ports/awsiot/node_modules
          rm -rf tools/updater/awsiot-thing-creator/node_modules
          rm -rf tools/updater/node_modules
          rm -rf .git

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            agent/lib/**
            ports/awsiot/lib/**
            tools/updater/awsiot-thing-creator/lib/**
            tools/updater/lib/**
          retention-days: 1

  set-pub-key:
    name: Set Public Key
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-and-prepare]
    environment: ${{ needs.validate-inputs.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create directories
        run: |
          mkdir -p agent/keys
          mkdir -p agent/keys/enebular

      - name: Install dependencies
        run: pip install boto3==1.26.137

      - name: Download public key
        env:
          ENEBULAR_AGENT_S3_PUB_KEY_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_PUB_KEY_BUCKET }}
          ENEBULAR_AGENT_S3_PUB_KEY_DIR: ${{ vars.ENEBULAR_AGENT_S3_PUB_KEY_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: python tools/s3_download.py ${ENEBULAR_AGENT_S3_PUB_KEY_BUCKET} ${ENEBULAR_AGENT_S3_PUB_KEY_DIR} "agent/keys/enebular/"

      - name: Upload key artifacts
        uses: actions/upload-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys
          retention-days: 1

  pack-prebuilt:
    name: Pack Prebuilt & Updater
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-and-prepare, set-pub-key]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys

      - name: Pack prebuilt and updater
        run: |
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ needs.validate-inputs.outputs.tag_name }}
          tar --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-prebuilt.tar.gz .
          mv /tmp/${AGENT_NAME}-prebuilt.tar.gz dist/
          UPDATER_NAME=enebular-agent-updater-${{ needs.validate-inputs.outputs.tag_name }}
          cd tools/updater/awsiot-thing-creator && npm ci --production
          cd .. && npm ci --production && tar --transform "s,^\.,${UPDATER_NAME}," -czf /tmp/${UPDATER_NAME}.tar.gz .
          mv /tmp/${UPDATER_NAME}.tar.gz ../../dist/

      - name: Upload prebuilt artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-artifacts
          path: dist/**
          retention-days: 1

  clamav-scan:
    name: ClamAV Security Scan
    runs-on: ubuntu-latest
    needs: [validate-inputs, pack-prebuilt]
    if: needs.validate-inputs.outputs.run_clamav == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo freshclam

      - name: Run ClamAV scan
        run: clamscan --infected --remove --recursive ./

  pack-x64:
    name: Pack x64
    runs-on: ubuntu-latest
    needs:
      [
        validate-inputs,
        build-and-prepare,
        set-pub-key,
        clamav-scan,
        pack-prebuilt
      ]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && needs.pack-prebuilt.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys

      - name: Pack x64
        run: |

          docker run --platform linux/amd64 -v $(pwd):/tmp/mount -w /tmp/mount -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_X64_VERSION }}:node-${{ env.NODE_VERSION }} /bin/bash -c "chmod 777 pack_enebular_agent.sh && ./pack_enebular_agent.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ needs.validate-inputs.outputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-x64.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-x64.tar.gz dist/

      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: x64-artifacts
          path: dist/**
          retention-days: 1

  pack-armv7l:
    name: Pack armv7l
    runs-on: ubuntu-latest
    needs:
      [
        validate-inputs,
        build-and-prepare,
        set-pub-key,
        clamav-scan,
        pack-prebuilt
      ]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && needs.pack-prebuilt.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pack armv7l
        run: |

          docker run --platform linux/arm/v7 -v $(pwd):/tmp/mount -w /tmp/mount -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM32V7_VERSION }}:node-${{ env.NODE_VERSION }} /bin/bash -c "source /home/enebular/.profile && chmod +x pack_enebular_agent_arm32.sh && ./pack_enebular_agent_arm32.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ needs.validate-inputs.outputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-armv7l.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-armv7l.tar.gz dist/

      - name: Upload armv7l artifacts
        uses: actions/upload-artifact@v4
        with:
          name: armv7l-artifacts
          path: dist/**
          retention-days: 1

  pack-arm64:
    name: Pack arm64
    runs-on: ubuntu-latest
    needs:
      [
        validate-inputs,
        build-and-prepare,
        set-pub-key,
        clamav-scan,
        pack-prebuilt
      ]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && needs.pack-prebuilt.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pack arm64
        run: |
          docker run --platform linux/arm64 -v $(pwd):/tmp/mount -w /tmp/mount -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM64V8_VERSION }}:node-${{ env.NODE_VERSION }} /bin/bash -c "source /home/enebular/.profile && chmod +x pack_enebular_agent_arm32.sh && ./pack_enebular_agent_arm32.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ needs.validate-inputs.outputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-arm64.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-arm64.tar.gz dist/

      - name: Upload arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arm64-artifacts
          path: dist/**
          retention-days: 1

  upload-dev:
    name: Upload to S3 (Dev)
    runs-on: ubuntu-latest
    needs: [validate-inputs, pack-prebuilt, pack-x64, pack-armv7l, pack-arm64]
    if: always() && needs.validate-inputs.outputs.environment == 'dev' && needs.validate-inputs.result == 'success' && needs.pack-prebuilt.result == 'success' && needs.pack-x64.result == 'success' && needs.pack-armv7l.result == 'success' && needs.pack-arm64.result == 'success'
    environment: dev-upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Install dependencies
        run: pip install boto3==1.26.137

      - name: Upload to S3
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cp -r dist ${{ needs.validate-inputs.outputs.tag_name }}
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}

      - name: Upload install.sh
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_INSTALLSH_DIR: ${{ vars.ENEBULAR_AGENT_S3_INSTALLSH_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} "tools/install/install.sh" ${ENEBULAR_AGENT_S3_INSTALLSH_DIR}

      - name: Upload Summary
        run: |
          echo "## 📦 Upload Completed (Dev)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Artifacts uploaded to Dev S3**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Uploaded Files:" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${ENEBULAR_AGENT_S3_BUCKET}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Path**: ${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Agent Files:" >> $GITHUB_STEP_SUMMARY
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -exec basename {} \; | while read file; do
            echo "- \`s3://${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Install Script URL:" >> $GITHUB_STEP_SUMMARY
          # Construct HTTPS URL from S3 bucket name
          INSTALL_URL="https://s3.${AWS_DEFAULT_REGION:-ap-northeast-1}.amazonaws.com/${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_INSTALLSH_DIR}"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$INSTALL_URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Install Command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "wget -qO- $INSTALL_URL | sudo -E bash -s -- --updater-version=${{ needs.validate-inputs.outputs.tag_name }} --release-version=${{ needs.validate-inputs.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          ENEBULAR_AGENT_S3_INSTALLSH_DIR: ${{ vars.ENEBULAR_AGENT_S3_INSTALLSH_DIR }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

  upload-staging:
    name: Upload to S3 (Staging)
    runs-on: ubuntu-latest
    needs: [validate-inputs, pack-prebuilt, pack-x64, pack-armv7l, pack-arm64]
    if: always() && needs.validate-inputs.outputs.environment == 'stg' && needs.validate-inputs.result == 'success' && needs.pack-prebuilt.result == 'success' && needs.pack-x64.result == 'success' && needs.pack-armv7l.result == 'success' && needs.pack-arm64.result == 'success'
    environment: staging-upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Install dependencies
        run: pip install boto3==1.26.137

      - name: Upload to S3
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cp -r dist ${{ needs.validate-inputs.outputs.tag_name }}
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}

      - name: Upload install.sh
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_INSTALLSH_DIR: ${{ vars.ENEBULAR_AGENT_S3_INSTALLSH_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} "tools/install/install.sh" ${ENEBULAR_AGENT_S3_INSTALLSH_DIR}

      - name: Upload Summary
        run: |
          echo "## 📦 Upload Completed (Staging)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Artifacts uploaded to Staging S3**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Uploaded Files:" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${ENEBULAR_AGENT_S3_BUCKET}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Path**: ${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Agent Files:" >> $GITHUB_STEP_SUMMARY
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -exec basename {} \; | while read file; do
            echo "- \`s3://${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Install Script URL:" >> $GITHUB_STEP_SUMMARY
          # Construct HTTPS URL from S3 bucket name
          INSTALL_URL="https://s3.${AWS_DEFAULT_REGION:-ap-northeast-1}.amazonaws.com/${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_INSTALLSH_DIR}"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$INSTALL_URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Install Command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "wget -qO- $INSTALL_URL | sudo -E bash -s -- --updater-version=${{ needs.validate-inputs.outputs.tag_name }} --release-version=${{ needs.validate-inputs.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          ENEBULAR_AGENT_S3_INSTALLSH_DIR: ${{ vars.ENEBULAR_AGENT_S3_INSTALLSH_DIR }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

  upload-production:
    name: Upload to S3 (Production)
    runs-on: ubuntu-latest
    needs: [validate-inputs, pack-prebuilt, pack-x64, pack-armv7l, pack-arm64]
    if: always() && needs.validate-inputs.outputs.environment == 'production' && needs.validate-inputs.result == 'success' && needs.pack-prebuilt.result == 'success' && needs.pack-x64.result == 'success' && needs.pack-armv7l.result == 'success' && needs.pack-arm64.result == 'success'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Install dependencies
        run: pip install boto3==1.26.137

      - name: Upload to S3
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cp -r dist ${{ needs.validate-inputs.outputs.tag_name }}
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}

      - name: Upload latest.info
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          LATEST_RELEASE_INFO=latest.info
          echo {\"version\":\"${{ needs.validate-inputs.outputs.tag_name }}\"} | python -mjson.tool > ${LATEST_RELEASE_INFO}
          python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} ${LATEST_RELEASE_INFO} ${ENEBULAR_AGENT_S3_DIR}/${LATEST_RELEASE_INFO}

      - name: Upload Summary
        run: |
          echo "## 📦 Upload Completed (Production)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Artifacts uploaded to Production S3**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **latest.info updated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Uploaded Files:" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${ENEBULAR_AGENT_S3_BUCKET}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Path**: ${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Agent Files:" >> $GITHUB_STEP_SUMMARY
          find ${{ needs.validate-inputs.outputs.tag_name }}/*tar.gz -exec basename {} \; | while read file; do
            echo "- \`s3://${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_DIR}/${{ needs.validate-inputs.outputs.tag_name }}/$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Latest Info:" >> $GITHUB_STEP_SUMMARY
          echo "- \`s3://${ENEBULAR_AGENT_S3_BUCKET}/${ENEBULAR_AGENT_S3_DIR}/latest.info\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Install Command (Production):" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "wget -qO- https://enebular.com/agent-install | sudo -E bash -s -- -v=${{ needs.validate-inputs.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
