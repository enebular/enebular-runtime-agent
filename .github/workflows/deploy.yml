name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - dev
          - stg
          - production
      tag_name:
        description: 'Tag/version name (e.g., 2.18.1 for production, 2.18.1-rc1 for stg, dev-test-123 for dev)'
        required: true
        type: string
      run_clamav_scan:
        description: 'Run ClamAV security scan'
        required: true
        type: boolean
        default: true

env:
  NODE_VERSION: '22.17.1'
  DOCKER_IMAGE_PREFIX: 'enebularagentdevelopers/enebular-agent'
  DOCKER_X64_VERSION: 'x64'
  DOCKER_ARM32V7_VERSION: 'arm32v7'
  DOCKER_ARM64V8_VERSION: 'arm64v8'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Validate tag format
        id: validate
        run: |
          TAG="${{ github.event.inputs.tag_name }}"
          ENV="${{ github.event.inputs.environment }}"
          
          # Validation rules
          if [[ "$ENV" == "production" ]]; then
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Production tags must be in format X.Y.Z (e.g., 2.18.1)"
              exit 1
            fi
          elif [[ "$ENV" == "stg" ]]; then
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              echo "Error: Staging tags must be in format X.Y.Z-rcN (e.g., 2.18.1-rc1)"
              exit 1
            fi
          elif [[ "$ENV" == "dev" ]]; then
            if [[ ! "$TAG" =~ ^dev- ]]; then
              echo "Error: Dev tags must start with 'dev-' (e.g., dev-test-123)"
              exit 1
            fi
          fi
          
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "âœ… Tag format is valid for $ENV environment"

  build-and-prepare:
    name: Build and Prepare
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.is_valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Show versions
        run: |
          node -v | xargs echo nodejs version:
          npm -v | xargs echo npm version:

      - name: Install and build
        run: |
          cd node-red && npm ci
          cd $GITHUB_WORKSPACE/agent && npm ci && npm run build
          cd $GITHUB_WORKSPACE/ports/awsiot && npm ci && npm run build
          cd $GITHUB_WORKSPACE/tools/updater/awsiot-thing-creator && npm ci && npm run build
          cd $GITHUB_WORKSPACE/tools/updater && npm ci && npm run build

      - name: Fix file permissions
        run: |
          # Fix permissions for executable files that may lose exec permissions in CI
          chmod +x $GITHUB_WORKSPACE/tools/updater/bin/enebular-agent-update || true
          chmod +x $GITHUB_WORKSPACE/tools/updater/script/update.sh || true
          chmod +x $GITHUB_WORKSPACE/agent/__tests__/data/*.sh || true
          chmod +x $GITHUB_WORKSPACE/agent/test/data/asset-script-* || true
          chmod +x $GITHUB_WORKSPACE/pack_enebular_agent*.sh || true
          chmod +x $GITHUB_WORKSPACE/ports/awsiot/bin/enebular-awsiot-agent || true

      - name: Run tests
        run: |
          cd ports/awsiot
          echo '{"host":"http://thing_shadow_rest_api_endpoint","port":8883,"clientId":"thing_name","thingName":"thing_name","caCert":"./certs/root_certificate","clientCert":"./certs/thing_cert","privateKey":"./certs/thing_private_key","topic":"aws/things/thing_name/shadow/update"}' > ./config.json
          npm run test
          rm ./config.json
          cd ../../tools/updater && npm run test

      - name: Clean up node_modules
        run: |
          rm -rf node-red/node_modules
          rm -rf agent/node_modules
          rm -rf ports/awsiot/node_modules
          rm -rf tools/updater/awsiot-thing-creator/node_modules
          rm -rf tools/updater/node_modules
          rm -rf .git

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            agent/lib/**
            ports/awsiot/lib/**
            tools/updater/awsiot-thing-creator/lib/**
            tools/updater/lib/**

  set-pub-key:
    name: Set Public Key
    runs-on: ubuntu-latest
    needs: build-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create directories
        run: |
          mkdir -p agent/keys
          mkdir -p agent/keys/enebular

      - name: Install dependencies
        run: pip install boto3==1.3.0

      - name: Download public key
        env:
          ENEBULAR_AGENT_S3_PUB_KEY_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_PUB_KEY_BUCKET }}
          ENEBULAR_AGENT_S3_PUB_KEY_DIR: ${{ vars.ENEBULAR_AGENT_S3_PUB_KEY_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: python tools/s3_download.py ${ENEBULAR_AGENT_S3_PUB_KEY_BUCKET} ${ENEBULAR_AGENT_S3_PUB_KEY_DIR} "agent/keys/enebular/"

      - name: Upload key artifacts
        uses: actions/upload-artifact@v4
        with:
          name: key-artifacts
          path: agent/keys/**

  pack-prebuilt:
    name: Pack Prebuilt & Updater
    runs-on: ubuntu-latest
    needs: [build-and-prepare, set-pub-key]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts

      - name: Pack prebuilt and updater
        run: |
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ github.event.inputs.tag_name }}
          tar --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-prebuilt.tar.gz .
          mv /tmp/${AGENT_NAME}-prebuilt.tar.gz dist/
          UPDATER_NAME=enebular-agent-updater-${{ github.event.inputs.tag_name }}
          cd tools/updater/awsiot-thing-creator && npm ci --production
          cd .. && npm ci --production && tar --transform "s,^\.,${UPDATER_NAME}," -czf /tmp/${UPDATER_NAME}.tar.gz .
          mv /tmp/${UPDATER_NAME}.tar.gz ../../dist/

      - name: Upload prebuilt artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-artifacts
          path: dist/**

  clamav-scan:
    name: ClamAV Security Scan
    runs-on: ubuntu-latest
    needs: pack-prebuilt
    if: github.event.inputs.run_clamav_scan == 'true' && github.event.inputs.environment != 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo freshclam

      - name: Run ClamAV scan
        run: clamscan --infected --remove --recursive ./

  pack-x64:
    name: Pack x64
    runs-on: ubuntu-latest
    needs: [build-and-prepare, set-pub-key, clamav-scan]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts

      - name: Pack x64
        run: |
          docker run -v $(pwd):/tmp/mount -w /tmp/mount -u$(id -u):$(id -g) -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_X64_VERSION }}:node-${{ env.NODE_VERSION }} /bin/bash -c "chmod 777 pack_enebular_agent.sh && ./pack_enebular_agent.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ github.event.inputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-x64.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-x64.tar.gz dist/

      - name: Upload x64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: x64-artifacts
          path: dist/**

  pack-armv7l:
    name: Pack armv7l
    runs-on: ubuntu-latest
    needs: [build-and-prepare, set-pub-key, clamav-scan]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Pack armv7l
        run: |
          docker run -v $(pwd):/tmp/mount -w /tmp/mount -u$(id -u):$(id -g) -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM32V7_VERSION }}:node-${{ env.NODE_VERSION }} /usr/bin/qemu-arm-static -execve /bin/bash -c "source ~/.profile && ./pack_enebular_agent_arm32.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ github.event.inputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-armv7l.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-armv7l.tar.gz dist/

      - name: Upload armv7l artifacts
        uses: actions/upload-artifact@v4
        with:
          name: armv7l-artifacts
          path: dist/**

  pack-arm64:
    name: Pack arm64
    runs-on: ubuntu-latest
    needs: [build-and-prepare, set-pub-key, clamav-scan]
    if: always() && needs.build-and-prepare.result == 'success' && needs.set-pub-key.result == 'success' && (needs.clamav-scan.result == 'success' || needs.clamav-scan.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download key artifacts
        uses: actions/download-artifact@v4
        with:
          name: key-artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Pack arm64
        run: |
          docker run -v $(pwd):/tmp/mount -w /tmp/mount -u$(id -u):$(id -g) -i ${{ env.DOCKER_IMAGE_PREFIX }}-${{ env.DOCKER_ARM64V8_VERSION }}:node-${{ env.NODE_VERSION }} /usr/bin/qemu-aarch64-static -execve /bin/bash -c "source ~/.profile && ./pack_enebular_agent_arm32.sh"
          rm -rf .git
          mkdir -p dist
          AGENT_NAME=enebular-agent-${{ github.event.inputs.tag_name }}
          tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-arm64.tar.gz .
          mv /tmp/${AGENT_NAME}-linux-arm64.tar.gz dist/

      - name: Upload arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arm64-artifacts
          path: dist/**

  upload:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs: [pack-prebuilt, pack-x64, pack-armv7l, pack-arm64]
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Install dependencies
        run: pip install boto3==1.3.0

      - name: Upload to S3
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cp -r dist ${{ github.event.inputs.tag_name }}
          find ${{ github.event.inputs.tag_name }}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}

      - name: Upload latest.info (Production only)
        if: github.event.inputs.environment == 'production'
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_DIR: ${{ vars.ENEBULAR_AGENT_S3_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          LATEST_RELEASE_INFO=latest.info
          echo {\"version\":\"${{ github.event.inputs.tag_name }}\"} | python -mjson.tool > ${LATEST_RELEASE_INFO}
          python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} ${LATEST_RELEASE_INFO} ${ENEBULAR_AGENT_S3_DIR}/${LATEST_RELEASE_INFO}

      - name: Upload install.sh (Non-production)
        if: github.event.inputs.environment != 'production'
        env:
          ENEBULAR_AGENT_S3_BUCKET: ${{ vars.ENEBULAR_AGENT_S3_BUCKET }}
          ENEBULAR_AGENT_S3_INSTALLSH_DIR: ${{ vars.ENEBULAR_AGENT_S3_INSTALLSH_DIR }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} "tools/install/install.sh" ${ENEBULAR_AGENT_S3_INSTALLSH_DIR}

      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.event.inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ClamAV Scan**: ${{ github.event.inputs.run_clamav_scan }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Uploaded:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -la dist/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY