image: 
  name: node:12.14.0
  run-as-user: 1000

definitions: 
  steps:
    - step: &build-test
        name: Build and test
        script:
          - (node -v | xargs echo nodejs version:)
          - (npm -v | xargs echo npm version:)
          - echo 'if ((`git diff package-lock.json | wc -l` != 0)); then echo "package-lock.file is required to be committed" && (exit 1); fi;' > /tmp/check_lock_file.sh
          # install & build
          - (cd node-red && npm ci)
          - (cd agent && npm ci && npm run build && . /tmp/check_lock_file.sh)
          - (cd ports/awsiot && npm ci && npm run build && . /tmp/check_lock_file.sh)
          - (cd ports/pelion && npm ci && npm run build && . /tmp/check_lock_file.sh)
          - (cd tools/updater/awsiot-thing-creator && npm ci && npm run build && . /tmp/check_lock_file.sh)
          - (cd tools/updater && npm ci && npm run build && . /tmp/check_lock_file.sh)
          # test
          - (cd agent && npm run test)
          - (cd ports/awsiot
            && echo '{"host":"http://thing_shadow_rest_api_endpoint","port":8883,"clientId":"thing_name","thingName":"thing_name","caCert":"./certs/root_certificate","clientCert":"./certs/thing_cert","privateKey":"./certs/thing_private_key","topic":"aws/things/thing_name/shadow/update"}' > ./config.json
            && npm run test && rm ./config.json)
          - (cd ports/pelion && npm run test)
          - (cd tools/updater && npm run test)
          # clean up
          - (cd node-red && rm -rf node_modules)
          - (cd agent && rm -rf node_modules)
          - (cd ports/awsiot && rm -rf node_modules)
          - (cd ports/pelion && rm -rf node_modules)
          - (cd tools/updater/awsiot-thing-creator && rm -rf node_modules)
          - (cd tools/updater && rm -rf node_modules)
          - rm -rf .git
        artifacts:
          - agent/lib/**
          - ports/awsiot/lib/**
          - ports/pelion/lib/**
          - tools/updater/awsiot-thing-creator/lib/**
          - tools/updater/lib/**
    - step: &set-pub-key
        name: Set the key
        image: python:3.5.1
        deployment: test_pub_key_download
        script:
          - mkdir -p agent/keys
          - mkdir -p agent/keys/enebular
          - pip install boto3==1.3.0
          - python tools/s3_download.py ${ENEBULAR_AGENT_S3_PUB_KEY_BUCKET} ${ENEBULAR_AGENT_S3_PUB_KEY_DIR} "agent/keys/enebular/"
        artifacts:
          - agent/keys/**
    - step: &set-pub-key-staging
        name: Set the key
        image: python:3.5.1
        deployment: Staging_pub_key_download
        script:
          - mkdir -p agent/keys
          - mkdir -p agent/keys/enebular
          - pip install boto3==1.3.0
          - python tools/s3_download.py ${ENEBULAR_AGENT_S3_PUB_KEY_BUCKET} ${ENEBULAR_AGENT_S3_PUB_KEY_DIR} "agent/keys/enebular/"
        artifacts:
          - agent/keys/**
    - step: &set-pub-key-release
        name: Set the key
        image: python:3.5.1
        deployment: Production_pub_key_download
        script:
          - mkdir -p agent/keys
          - mkdir -p agent/keys/enebular
          - pip install boto3==1.3.0
          - python tools/s3_download.py ${ENEBULAR_AGENT_S3_PUB_KEY_BUCKET} ${ENEBULAR_AGENT_S3_PUB_KEY_DIR} "agent/keys/enebular/"
        artifacts:
          - agent/keys/**
    - step: &pack-prebuilt
        name: Pack (prebuilt & updater)
        script:
          - rm -rf .git
          - mkdir -p dist
          - AGENT_NAME=enebular-agent-${BITBUCKET_TAG}
          - tar --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-prebuilt.tar.gz .
          - mv /tmp/${AGENT_NAME}-prebuilt.tar.gz dist/
          - UPDATER_NAME=enebular-agent-updater-${BITBUCKET_TAG}
          - (cd tools/updater/awsiot-thing-creator && npm ci --production)
          - (cd tools/updater && npm ci --production && tar --transform "s,^\.,${UPDATER_NAME}," -czf /tmp/${UPDATER_NAME}.tar.gz .)
          - mv /tmp/${UPDATER_NAME}.tar.gz dist/
        artifacts:
          - dist/**
    - step: &pack-x64
        name: Pack (x64)
        image: enebularagentdevelopers/enebular-agent-x64:node-12.14.0
        script:
          - chmod 777 pack_enebular_agent.sh
          - ./pack_enebular_agent.sh
          - rm -rf .git
          - mkdir -p dist
          - AGENT_NAME=enebular-agent-${BITBUCKET_TAG}
          - tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-x64.tar.gz .
          - mv /tmp/${AGENT_NAME}-linux-x64.tar.gz dist/
        artifacts:
          - dist/**
    - step: &pack-armv7l
        name: Pack (armv7l)
        script:
          - docker run -v $(pwd):/tmp/mount -w /tmp/mount -u`id -u`:`id -g` -i enebularagentdevelopers/enebular-agent-arm32v7:node-12.14.0 /usr/bin/qemu-arm-static -execve /bin/bash -c "source ~/.profile && ./pack_enebular_agent.sh"
          - rm -rf .git
          - mkdir -p dist
          - AGENT_NAME=enebular-agent-${BITBUCKET_TAG}
          - tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-armv7l.tar.gz .
          - mv /tmp/${AGENT_NAME}-linux-armv7l.tar.gz dist/
        services:
          - docker
        artifacts:
          - dist/**
    - step: &pack-arm64
        name: Pack (arm64)
        script:
          - docker run -v $(pwd):/tmp/mount -w /tmp/mount -u`id -u`:`id -g` -i enebularagentdevelopers/enebular-agent-arm64v8:node-12.14.0 /usr/bin/qemu-aarch64-static -execve /bin/bash -c "source ~/.profile && ./pack_enebular_agent.sh"
          - rm -rf .git
          - mkdir -p dist
          - AGENT_NAME=enebular-agent-${BITBUCKET_TAG}
          - tar --exclude="./dist" --transform "flags=S;s,^\.,${AGENT_NAME}," -czf /tmp/${AGENT_NAME}-linux-arm64.tar.gz .
          - mv /tmp/${AGENT_NAME}-linux-arm64.tar.gz dist/
        services:
          - docker
        artifacts:
          - dist/**
    - step: &upload
        name: Upload (Staging)
        image: python:3.5.1
        deployment: Staging
        script:
          - pip install boto3==1.3.0
          - cp -r dist ${BITBUCKET_TAG}
          - find ${BITBUCKET_TAG}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}
        artifacts:
          - dist/**
    - step: &upload-release
        name: Upload (Production)
        image: python:3.5.1
        deployment: production
        trigger: manual
        script:
          - pip install boto3==1.3.0
          - cp -r dist ${BITBUCKET_TAG}
          - find ${BITBUCKET_TAG}/*tar.gz -print0 | xargs -t -0 -I {} python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} {} ${ENEBULAR_AGENT_S3_DIR}/{}
          - LATEST_RELEASE_INFO=latest.info
          - echo {\"version\":\"${BITBUCKET_TAG}\"} | python -mjson.tool > ${LATEST_RELEASE_INFO}
          - python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} ${LATEST_RELEASE_INFO} ${ENEBULAR_AGENT_S3_DIR}/${LATEST_RELEASE_INFO}
        artifacts:
          - dist/**
    - step: &upload-installsh
        name: Upload-install.sh (test)
        image: python:3.5.1
        deployment: test_installsh_upload
        script:
          - pip install boto3==1.3.0
          - python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} "tools/install/install.sh" ${ENEBULAR_AGENT_S3_INSTALLSH_DIR}
        artifacts:
          - '**'
    - step: &upload-installsh-staging
        name: Upload-install.sh (Staging)
        image: python:3.5.1
        deployment: Staging_installsh_upload
        script:
          - pip install boto3==1.3.0
          - python tools/s3_upload.py ${ENEBULAR_AGENT_S3_BUCKET} "tools/install/install.sh" ${ENEBULAR_AGENT_S3_INSTALLSH_DIR}
        artifacts:
          - '**'
    - step: &clamav-scan
          name: ClamAV scan
          image: atlassian/default-image:2
          script:
            - apt-get -y update
            - apt-get -y install clamav
            - freshclam
            - clamscan --infected --remove --recursive ./
pipelines:
  branches:
    develop:
    - step: *build-test
  tags:
    '[0-9]*.[0-9]*.[0-9]*':
      - step: *build-test
      - step: *set-pub-key-release
      - step: *pack-prebuilt
      - step: *clamav-scan
      - parallel:
          - step: *pack-x64
          - step: *pack-armv7l
          - step: *pack-arm64
      - step: *upload-release
    '[0-9]*.[0-9]*.[0-9]*-rc*':
      - step: *build-test
      - step: *set-pub-key-staging
      - step: *pack-prebuilt
      - step: *clamav-scan
      - parallel:
          - step: *pack-x64
          - step: *pack-armv7l
          - step: *pack-arm64
      - step: *upload-installsh-staging
      - step: *upload
    'dev-debug-*':
      - step: *set-pub-key
      - step: *pack-prebuilt
      - step: *upload-installsh
      - step: *upload
    'dev-test-*':
      - step: *build-test
      - step: *set-pub-key
      - step: *pack-prebuilt
      - parallel:
          - step: *pack-x64
          - step: *pack-armv7l
          - step: *pack-arm64
      - step: *upload-installsh
      - step: *upload
definitions:
  services:
    docker:
      memory: 3072
